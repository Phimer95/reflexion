{"name": "HumanEval_125_split_words", "language": "py", "prompt": "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n    3\n    \"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_125_split_words.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "split_words", "test": "def check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"}
{"name": "HumanEval_116_sort_array", "language": "py", "prompt": "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n    [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_116_sort_array.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sort_array", "test": "def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"}
{"name": "HumanEval_149_sorted_list_sum", "language": "py", "prompt": "from typing import List\n\ndef sorted_list_sum(lst: List[str]) -> List[str]:\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    >>> list_sort(['aa', 'a', 'aaa'])\n    ['aa']\n    >>> list_sort(['ab', 'a', 'aaa', 'cd'])\n    ['ab', 'cd']\n    \"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_149_sorted_list_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sorted_list_sum", "test": "def check(candidate):\n    assert candidate(['aa', 'a', 'aaa']) == ['aa']\n    assert candidate(['school', 'AI', 'asdf', 'b']) == ['AI', 'asdf', 'school']\n    assert candidate(['d', 'b', 'c', 'a']) == []\n    assert candidate(['d', 'dcba', 'abcd', 'a']) == ['abcd', 'dcba']\n    assert candidate(['AI', 'ai', 'au']) == ['AI', 'ai', 'au']\n    assert candidate(['a', 'b', 'b', 'c', 'c', 'a']) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == ['cc', 'dd', 'aaaa', 'bbbb']\n\ndef test_check():\n    check(sorted_list_sum)\n\ntest_check()\n"}
{"name": "HumanEval_99_closest_integer", "language": "py", "prompt": "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n    >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    \"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_99_closest_integer.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "closest_integer", "test": "def check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"}